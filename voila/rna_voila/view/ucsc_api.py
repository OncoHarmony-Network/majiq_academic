import requests
from io import StringIO
import re
from intervaltree import Interval, IntervalTree

def make_block_list(items, _chr, strand, color, name):
    if not items:
        return ''
    num_blocks = len(items)
    block_starts = []
    block_lengths = []
    for item in items:
        block_starts.append(str(item['start'] - items[0]["start"]))
        block_lengths.append(str(item['end'] - item['start']))

    retline = f'{_chr} {items[0]["start"]} {items[-1]["end"]} {name} 0 {strand} {items[0]["start"]} {items[-1]["end"]} {color} {num_blocks} {",".join(block_lengths)} {",".join(block_starts)}\n'

    return retline

def partition_juncs(all_juncs):
    # separate junctions into multiple blocks so that no junctions overlap on a single line
    partitions = []
    loop_i = 0
    cur_idb = IntervalTree()
    cur_partition = []
    while all_juncs:
        if loop_i >= len(all_juncs):
            loop_i = 0
            partitions.append(cur_partition)
            cur_partition = []
            cur_idb = IntervalTree()

        junc = all_juncs[loop_i]

        if not cur_idb[junc['start']:junc['end']]:
            cur_partition.append(junc)
            all_juncs.pop(loop_i)
            cur_idb[junc['start']:junc['end']] = True

        else:
            loop_i += 1

    if cur_partition:
        partitions.append(cur_partition)

    return partitions

def make_custom_track(genome, _chr, strand, exons, all_introns, all_junctions):

    exon_color = "127,127,127"
    intron_color = "230,52,54"
    denovo_intron_color = "94,182,91"
    junction_color = "230,52,54"
    junction_denovo_color = "94,182,91"

    # remove half exons
    exons = [x for x in exons if x['start'] != -1 and x['end'] != -1]

    if True:
        # filter no reads out
        all_introns = [x for x in all_introns if x['has_reads']]
        all_junctions = [x for x in all_junctions if x['has_reads']]

    bed_file = ''

    bed_file += f'browser position {_chr}:{exons[0]["start"]}-{exons[-1]["end"]}\n'
    bed_file += 'browser hide all\n'
    bed_file += f'track name="Voila" description="Generated by Voila track export" visibility=2 itemRgb="On" useScore=1\n'



    bed_file += make_block_list(exons, _chr, strand, exon_color, 'Exons')

    # print(all_introns, all_junctions)
    # max_score = max([x['reads'] for x in all_introns] + [x['reads'] for x in all_junctions])
    # print(max_score)
    # assert False


    # annotated introns row
    annot_introns = [x for x in all_introns if x['annotated']]
    bed_file += make_block_list(annot_introns, _chr, strand, intron_color, 'Annotated_Introns')

    # annotated introns row
    denovo_introns = [x for x in all_introns if not x['annotated']]
    bed_file += make_block_list(denovo_introns, _chr, strand, denovo_intron_color, 'De_Novo_Introns')

    annotated_junctions = [x for x in all_junctions if x['annotated']]
    denovo_junctions = [x for x in all_junctions if not x['annotated']]

    a_partitions = partition_juncs(annotated_junctions)
    for partition in a_partitions:
        bed_file += make_block_list(partition, _chr, strand, junction_color, 'Annotated_Junctions')

    d_partitions = partition_juncs(denovo_junctions)
    for partition in d_partitions:
        bed_file += make_block_list(partition, _chr, strand, junction_denovo_color, 'De_Novo_Junctions')


    # for junction in all_junctions:
    #     bed_file += f'{_chr} {junction["start"]} {junction["end"]} Junction 0 {strand} {junction["start"]} {junction["start"]} {junction_color if junction["annotated"] else junction_denovo_color} 1 {junction["end"]-junction["start"]} 0\n'


    # introns row
    # num_blocks = len(exons)
    # block_starts = []
    # block_lengths = []
    # for exon in exons:
    #     block_starts.append(str(exon['start'] - global_start))
    #     block_lengths.append(str(exon['end'] - exon['start']))
    #
    # bed_file += f'{_chr} {global_start} {global_end} Pos1 0 {strand} {global_start} {global_end} 255,0,0 {num_blocks} {",".join(block_lengths)} {",".join(block_starts)}\n'


    tmp_file = StringIO()
    tmp_file.write(bed_file)
    tmp_file.seek(0)


    files = {'hgct_customText': tmp_file}
    payload = {'db': genome}

    r = requests.post('https://genome.ucsc.edu/cgi-bin/hgCustom', files=files, data=payload)

    content = r.text

    hgsid = re.findall(r'hgsid=[0-9]*_[a-zA-Z0-9]*', content)[0].split('=')[1]
    link = f'https://genome.ucsc.edu/cgi-bin/hgTracks?hgsid={hgsid}&position={_chr}%3A{exons[0]["start"]}-{exons[-1]["end"]}'
    return link

if __name__ == "__main__":
    all_junctions = [{'gene_id': 'ENSMUSG00000032735', 'start': 61801408, 'end': 61805066, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61805146, 'end': 61805637, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61805644, 'end': 61806387, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61806447, 'end': 61808380, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61808438, 'end': 61808932, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61808438, 'end': 61811311, 'has_reads': 1, 'annotated': 0, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61808961, 'end': 61811311, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61811458, 'end': 61813542, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61813606, 'end': 61814198, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61814332, 'end': 61816922, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61814332, 'end': 61818989, 'has_reads': 1, 'annotated': 0, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61814332, 'end': 61819791, 'has_reads': 1, 'annotated': 0, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61816969, 'end': 61818989, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61816969, 'end': 61819791, 'has_reads': 1, 'annotated': 0, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61819087, 'end': 61819791, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61819917, 'end': 61820367, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61819917, 'end': 61823867, 'has_reads': 1, 'annotated': 0, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61820396, 'end': 61821873, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61822028, 'end': 61823867, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}, {'gene_id': 'ENSMUSG00000032735', 'start': 61823938, 'end': 61826501, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61826559, 'end': 61839690, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61839777, 'end': 61845790, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61845883, 'end': 61849298, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61849424, 'end': 61855203, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61855315, 'end': 61857002, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61857185, 'end': 61871566, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61871703, 'end': 61911229, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 1}, {'gene_id': 'ENSMUSG00000032735', 'start': 61911331, 'end': 61911679, 'has_reads': 1, 'annotated': 1, 'is_simplified': 0, 'is_constitutive': 0}]
    print(len(all_junctions))
    partitions = partition_juncs(all_junctions)
    total = 0
    for part in partitions:
        print(len(part))
        total += len(part)
        #print(part)
    print(total)