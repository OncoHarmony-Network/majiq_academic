import requests
from io import StringIO
import re


def make_block_list(items, _chr, strand, color, name):
    if not items:
        return ''
    num_blocks = len(items)
    block_starts = []
    block_lengths = []
    for item in items:
        block_starts.append(str(item['start'] - items[0]["start"]))
        block_lengths.append(str(item['end'] - item['start']))

    retline = f'{_chr} {items[0]["start"]} {items[-1]["end"]} {name} 0 {strand} {items[0]["start"]} {items[-1]["end"]} {color} {num_blocks} {",".join(block_lengths)} {",".join(block_starts)}\n'

    return retline


def make_custom_track(genome, _chr, strand, exons, all_introns, all_junctions):

    exon_color = "217,217,217"
    intron_color = "230,52,54"
    denovo_intron_color = "94,182,91"
    junction_color = "230,52,54"
    junction_denovo_color = "94,182,91"


    bed_file = ''

    bed_file += f'browser position {_chr}:{exons[0]["start"]}-{exons[-1]["end"]}\n'
    bed_file += 'browser hide all\n'
    bed_file += f'track name="Voila" description="Generated by Voila track export" visibility=2 itemRgb="On" useScore=1\n'

    bed_file += make_block_list(exons, _chr, strand, exon_color, 'Exons')

    # print(all_introns, all_junctions)
    # max_score = max([x['reads'] for x in all_introns] + [x['reads'] for x in all_junctions])
    # print(max_score)
    # assert False


    # annotated introns row
    annot_introns = [x for x in all_introns if x['annotated']]
    bed_file += make_block_list(annot_introns, _chr, strand, intron_color, 'Annotated_Introns')

    # annotated introns row
    denovo_introns = [x for x in all_introns if not x['annotated']]
    bed_file += make_block_list(denovo_introns, _chr, strand, denovo_intron_color, 'De_Novo_Introns')

    for junction in all_junctions:
        bed_file += f'{_chr} {junction["start"]} {junction["end"]} Junction 0 {strand} {junction["start"]} {junction["start"]} {junction_color if junction["annotated"] else junction_denovo_color} 1 {junction["end"]-junction["start"]} 0\n'


    # introns row
    # num_blocks = len(exons)
    # block_starts = []
    # block_lengths = []
    # for exon in exons:
    #     block_starts.append(str(exon['start'] - global_start))
    #     block_lengths.append(str(exon['end'] - exon['start']))
    #
    # bed_file += f'{_chr} {global_start} {global_end} Pos1 0 {strand} {global_start} {global_end} 255,0,0 {num_blocks} {",".join(block_lengths)} {",".join(block_starts)}\n'




#browser position chr7:127471196-127495720
#browser hide all
#track name="ItemRGBDemo" description="Item RGB demonstration" visibility=2 itemRgb="On"

    tmp_file = StringIO()
    tmp_file.write(bed_file)
    tmp_file.seek(0)


    files = {'hgct_customText': tmp_file}
    payload = {'db': genome}

    r = requests.post('http://genome.ucsc.edu/cgi-bin/hgCustom', files=files, data=payload)

    content = r.text

    hgsid = re.findall(r'hgsid=[0-9]*_[a-zA-Z0-9]*', content)[0].split('=')[1]
    link = f'http://genome.ucsc.edu/cgi-bin/hgTracks?hgsid={hgsid}'
    return link